
struct Node
{
	int data;
	struct Node *next, *prev;
	
	Node (int x){
	    data = x;
	    next = NULL;
	    prev = NULL;
	}
};


 // } Driver Code Ends


/*
Structure of the node of the list is as
struct Node
{
	int data;
	struct Node *next, *prev;
	Node (int x){
	    data = x;
	    next = prev = NULL;
	}
}; */


// Function to merge two DLLs
struct Node *sortDoubly(struct Node *head)
{
	// Your code here
    Node* curr=head;
    vector<int> vec;
    while(curr!=NULL)
    {
        vec.push_back(curr->data);
        curr=curr->next;
    }
    sort(vec.begin(),vec.end(),greater<int>());
    Node *ans =NULL;
    for(int i=0;i<vec.size();i++) 
    {
        Node *new_node=new Node(vec[i]); 
        new_node->next=ans;
        ans=new_node;
    }
    curr=ans;
    Node *back=NULL;
    while(curr!=NULL)
    {
    curr->prev=back;
    back=curr;
    curr=curr->next;
    }
    return ans;
}


// { Driver Code Starts.

void insert(struct Node **head, int data)
{
	struct Node *temp = new Node (data);
	if (!(*head))
		(*head) = temp;
	else
	{
		temp->next = *head;
		(*head)->prev = temp;
		(*head) = temp;
	}
}

void print(struct Node *head)
{
	struct Node *temp = head;
	while (head)
	{
		cout<<head->data<<' ';
		temp = head;
		head = head->next;
	}
	cout<<endl;
	while (temp)
	{
		cout<<temp->data<<' ';
		temp = temp->prev;
	}
	cout<<endl;
}

// Utility function to swap two integers
void swap(int *A, int *B)
{
	int temp = *A;
	*A = *B;
	*B = temp;
}


// Driver program
int main(void)
{
    long test;
    cin>>test;
    while(test--)
    {
        int n, tmp;
        struct Node *head = NULL;
        cin>>n;
        while(n--){
            cin>>tmp;
            insert(&head, tmp);
        }
        head = sortDoubly(head);
        print(head);
    }
	return 0;
}
